#### Sersync同步服务
##### sersync项目简介和框架设计
- sersync是利用inotify和rsync技术实现对服务器数据实时同步的解决方案,其中inotify用于监控sersync所在服务器上文件系统的事件变化,rsync是目前广泛使用的本机及异地数据同步工具,其优点是对变化的目录数据操作,甚至是一个文件不同的部分进行同步,所以有时大大超过使用挂接文件系统或scp等方式进行镜像同步.
- 目前使用的比较多的同步程序版本是inotify-tools,另外一个是google开源项目Openduckbill(依赖于inotify-tools),这两个都是基于脚本语言编写的,其设计思路同样是采用inotify与rsync命令.
- 相比上面两个项目,sersync项目的优点是:
  1.  使用c++编写,对linux系统文件产生的临时文件和重复的文件操作会进行过滤,在结合rsync同步的时候,会减少运行时消耗的本地及网络资源,因此速度更快;
  2. 相比较上面的两个项目,sersync配置起来简单,下载源码后,在bin目录下是已经编译好的二进制文件,配合bin目录下的xml文件直接使用即可
  3. 使用多线程进行同步(即可以并发同步多个不同文件),尤其同步较大文件时,能够保证多个服务器保持同步状态
  4. sersync自带出错处理机制,通过失败队列对出错的文件重新同步,如果仍旧失败,则每10个小时对同步失败的文件再重新同步
  5. sersync自带crontab功能,只要在xml配置文件中开启,即可按预先的配置,隔一段时间整体同步一次
  6. sersync自带socket与http的协议扩展,可以满足有特殊需求的公司进行二次开发
#### Sersync安装部署
##### 安装部署Sersync
1. 系统资源列表

角色|IP|机器名
--|--|--
Sersync(Master)|192.168.1.33|rsync_server
rsync服务(storage1)|192.168.1.31|rsync_client1
rsync服务(storage1)|192.168.1.32|rsync_client2

2. 检查系统环境
  ```
  // 我这三台机器都一样
  [root@rsync_server ~]# cat /etc/redhat-release  //master服务器查看系统
  CentOS release 6.5 (Final)
  [root@rsync_server ~]# uname -r //查看内核
  2.6.32-431.el6.x86_64
  ```
3. 配置同步服务器
  ```
  //先在两台storage服务器上配置rsync服务
  [root@rsync_client2 ~]# rsync --version|head -2 //查看两台storage节点的rsync版本
  rsync  version 3.0.6  protocol version 30
  Copyright (C) 1996-2009 by Andrew Tridgell, Wayne Davison, and others.

  //在两个storage节点上创建rsyncd的配置文件
  [root@rsync_client1 ~]# cat >/etc/rsyncd.conf<<EOF
  uid = root
  gid = root
  use chroot = no
  max connection = 2000
  timeout = 600
  pid file = /var/run/rsync.pid
  lock file = /var/run/rsync.lock
  log file = /var/log/rsync.log
  ignore errors
  read only = false
  list = false
  hosts allow = 192.168.1.0/24
  hosts deny = 0.0.0.0/32
  auth users = rsync_backup
  secrets file = /etc/rsync.password
  # 下面是模块
  [www]
  comment = www by Aphey on 2018-12-10
  path = /data0/www/www/
  [bbs]
  comments =  bbs by Aphey on 2018-12-10
  path = /data0/www/bbs/
  [blog]
  comments = blog by Aphey on 2018-12-10
  path = /data0/www/blog/
  EOF

  //在storage节点上创建/etc/rsync.password文件,注意文件的内容和 master节点上不同
  [root@rsync_client2 ~]# vi /etc/rsync.password
  [root@rsync_client2 ~]# cat /etc/rsync.password
  rsync_backup:123456
  [root@rsync_client2 ~]# chmod 600 /etc/rsync.password //必须把/etc/rsyncpassword的权限改为600,否则同步会报错


  //上面的rsync服务的配置文件,标明允许sersync主服务器(192.168.1.33)访问,rsync同步模块为[www],[bbs],[blog]将同步过来的文件分别放入对应的path指定的目录/data0/www/www,/data0/www/bbs和/data0/www/blog/下.如果有多台目标服务器,则每一台都需要进行类似的rsync服务配置,上面的uid和gid则要换成您服务器的相应同步用户,注意,rsync服务账户(这里我们用的是root)要对被同步目录(/data/www/)的写入更新权限
  ```
4. 创建相关待同步目录
  ```
  [root@rsync_client1 ~]# mkdir -p /data0/www/{bbs,www,blog}  //在storage节点上创建/data0/www/{bbs,www,blog}目录
  [root@rsync_client1 ~]# ls /data0/www
  bbs  blog  www

  [root@rsync_server ~]# mkdir -p /data0/www/bbs /data0/www/www /data0/www/blog //在master上创建/data0/www/{bbs,www,blog}目录
  [root@rsync_server ~]# ls /data0/www/
  bbs  blog  www
  ```
5. 在master节点上配置相关的权限认证, 并开启rsync守护进程
  ```
  [root@rsync_server ~]# echo "rsync_backup:123456" > /etc/rsync.password //在master节点上创建rsync.password文件
  [root@rsync_server ~]# cat /etc/rsync.password  //这里只要放密码即可,内容和storage节点上不一样
  123456

  [root@rsync_server ~]# rsync --daemon //开启rsync守护进程
  [root@rsync_server ~]# ps -aux|grep rsync
  Warning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ
  root      3153  0.0  0.0 107628   532 ?        Ss   09:08   0:00 rsync --daemon
  root      3155  0.0  0.0 103252   828 pts/0    S+   09:08   0:00 grep --color rsync
  ```

6. 在storage节点上开启rsync,并设置开机自启动
  ```
  [root@rsync_client1 ~]# rsync --daemon
  [root@rsync_client1 ~]# echo "$(which rsync) --daemon " >> /etc/rc.local
  [root@rsync_client1 ~]# cat /etc/rc.local
  #!/bin/sh
  #
  # This script will be executed *after* all the other init scripts.
  # You can put your own initialization stuff in here if you don't
  # want to do the full Sys V style init stuff.

  touch /var/lock/subsys/local
  /etc/init.d/nfs start
  /usr/bin/rsync --daemon
  ```

7. 手动进行同步测试
  ```
  //在master节点上创建文件进行测试
  [root@rsync_server ~]# touch /data0/www/bbs/bbs.log /data0/www/blog/blog.log /data0/www/www/www.log
  [root@rsync_server ~]# ll /data0/www/bbs/bbs.log /data0/www/blog/blog.log /data0/www/www/www.log  //创建成功
  -rw-r--r-- 1 root root 0 Dec 11 09:20 /data0/www/bbs/bbs.log
  -rw-r--r-- 1 root root 0 Dec 11 09:20 /data0/www/blog/blog.log
  -rw-r--r-- 1 root root 0 Dec 11 09:20 /data0/www/www/www.log

  //执行同步命令,同步成功
  [root@rsync_server ~]# rsync -avzP /data0/www/www/ rsync_backup@192.168.1.31::www/ --password-file=/etc/rsync.password
  sending incremental file list
  ./
  bbs/
  bbs/bbs.log
             0 100%    0.00kB/s    0:00:00 (xfer#1, to-check=2/7)
  blog/
  blog/blog.log
             0 100%    0.00kB/s    0:00:00 (xfer#2, to-check=1/7)
  www/
  www/www.log
             0 100%    0.00kB/s    0:00:00 (xfer#3, to-check=0/7)

  sent 241 bytes  received 80 bytes  214.00 bytes/sec
  total size is 0  speedup is 0.00
  // 因为有三个模块,两个storage IP, 所以我们在master服务器端一共有6条这样的命令
  rsync -avzP /data0/www/www/ rsync_backup@192.168.1.31::www/ --password-file=/etc/rsync.password
  rsync -avzP /data0/www/www/ rsync_backup@192.168.1.32::www/ --password-file=/etc/rsync.password
  rsync -avzP /data0/www/bbs/ rsync_backup@192.168.1.31::bbs/ --password-file=/etc/rsync.password
  rsync -avzP /data0/www/bbs/ rsync_backup@192.168.1.32::bbs/ --password-file=/etc/rsync.password
  rsync -avzP /data0/www/blog/ rsync_backup@192.168.1.31::blog/ --password-file=/etc/rsync.password
  rsync -avzP /data0/www/blog/ rsync_backup@192.168.1.32::blog/ --password-file=/etc/rsync.password

  //执行完上面的命令,到storage端查看
  [root@rsync_client1 ~]# tree /data0/    //成功把文件同步过来了
  /data0/
  └── www
      ├── bbs
      │   └── bbs.log
      ├── blog
      │   └── blog.log
      └── www
          └── www.log

  4 directories, 3 files
  ```
#### 到当前为止,我们已经安装好rsync了,接下来我们开始部署sersync
##### 安装sersync
1. 下载sersync源码包,我已经下载好了.也可以到这个地方[下载](https://code.google.com/archive/p/sersync/downloads)
2. 解压sersync源码包到/usr/local中
    ```
    [root@rsync_server tools]# tar zxvf sersync2.5.4_64bit_binary_stable_final.tar.gz -C /usr/local
    GNU-Linux-x86/
    GNU-Linux-x86/sersync2
    GNU-Linux-x86/confxml.xml
    [root@rsync_server tools]# cd /usr/local/
    [root@rsync_server local]# ls   //注意sersync的目录叫GNU-Linux-x86
    bin  etc  games  GNU-Linux-x86  include  lib  lib64  libexec  sbin  share  src
    [root@rsync_server local]# mv GNU-Linux-x86 sersync //我们给它重命名
    [root@rsync_server local]# tree sersync/
    sersync/
    ├── confxml.xml
    └── sersync2

    0 directories, 2 files
    ```
3. 规范sersync目录结构
    ```
    [root@rsync_server local]# cd sersync/
    [root@rsync_server sersync]# mkdir conf bin logs  //创建conf,bin,logs目录
    [root@rsync_server sersync]# mv confxml.xml conf/ //把confxml.xml移动到conf/中去
    [root@rsync_server sersync]# mv sersync2  bin/sersync //把二进制文件sersync2移动到bin/中并改名为sersync
    [root@rsync_server sersync]# tree //再查看目录结构,就正规许多了
    .
    ├── bin
    │   └── sersync
    ├── conf
    │   └── confxml.xml
    └── logs
    ```
4. 备份原来的配置文件
    ```
    [root@rsync_server sersync]# /bin/cp conf/confxml.xml{,.$(date +%F)} //备份格式为在文件后面加上日期
    [root@rsync_server sersync]# cd conf/
    [root@rsync_server conf]# ls
    confxml.xml  confxml.xml.2018-12-16
    ```
5. 修改,优化sersync配置文件
    ```
    1. 修改24-28行,vi 配置文件后24gg,这一段是定义本地要同步的目录,原来的内容:
    <localpath watch="/opt/tongbu">
             <remote ip="127.0.0.1" name="tongbu1"/>
             <!--<remote ip="192.168.8.39" name="tongbu"/>-->   //同步到哪一台storage机器上,后面的tongbu指的是模块
             <!--<remote ip="192.168.8.40" name="tongbu"/>-->
    </localpath>

    // 修改为我们实验配置文件,结果如下
    <localpath watch="/data0/www/www">
             <remote ip="127.0.0.1" name="www"/>
             <remote ip="192.168.1.31" name="www"/>
             <remote ip="192.168.1.32" name="www"/>
    </localpath>

    <localpath watch="/data0/www/bbs">
             <remote ip="127.0.0.1" name="bbs"/>
             <remote ip="192.168.1.31" name="bbs"/>
             <remote ip="192.168.1.32" name="bbs"/>
    </localpath>

    <localpath watch="/data0/www/blog">
             <remote ip="127.0.0.1" name="blog"/>
             <remote ip="192.168.1.31" name="blog"/>
             <remote ip="192.168.1.32" name="blog"/>
    </localpath>

    2. 修改认证内容(原始文件31-34行),其实就是我们上面rsync命令,原来的内容是
    <rsync>
       <commonParams params="-artuz"/>  //其实就是我们上面rsync命令的参数,我们用的是-avzP
       <auth start="false" users="root" passwordfile="/etc/rsync.pas"/>
       <userDefinedPort start="false" port="874"/><!-- port=874 -->
       <timeout start="false" time="100"/><!-- timeout=100 -->
       <ssh start="false"/>
    </rsync>

    //修改后的内容如下
    <rsync>
       <commonParams params="-artuz"/>  //其实就是我们上面rsync命令的参数,我们用的是-avzP
       <auth start="true" users="rsync_backup" passwordfile="/etc/rsync.password"/> //首先要启用认证
       <userDefinedPort start="false" port="874"/><!-- port=874 --> //不启用自定义端口
       <timeout start="true" time="100"/><!-- timeout=100 -->   //启用超时
       <ssh start="false"/>
    </rsync>

    3.修改(原始文件36-37行),作用是当同步失败时,把失败的队列写入到一个文件中,并每60分钟进行重新同步
    <failLog path="/tmp/rsync_fail_log.sh" timeToExecute="60"/><!--default every 60mins execute once-->

    //修改后为
    <failLog path="/usr/local/sersync/logs/rsync_fail_log.sh" timeToExecute="60"/><!--default every 60mins execute once-->

    ```
**### 到此配置文件修改完成**

##### 开启sersync守护进程同步数据
1. 配置sersync环境变量,把/usr/local/sersync/bin添加到PATH变量中去
    ```
    [root@rsync_server conf]# echo 'export PATH=$PATH:/usr/local/sersync/bin'>>/etc/profile
    [root@rsync_server conf]# tail -1 /etc/profile
    export PATH=$PATH:/usr/local/sersync/bin
    [root@rsync_server conf]# source /etc/profile
    [root@rsync_server conf]# which sersync
    /usr/local/sersync/bin/sersync
    ```

2. 启动命令
    ```
    [root@rsync_server conf]# sersync -r -d -o /usr/local/sersync/conf/confxml.xml
    -d: daemon,守护进程后台启动
    -o: 指定配置文件,不指定,默认会指定二进制命令目录下的配置文件
    -r: 我们的主服务和同步服务器一开始可能不一致,-r 是让服务器在初始化的时候同步一次

    // 执行结果如下:
    [root@rsync_server conf]# sersync -r -d -o /usr/local/sersync/conf/confxml.xml
    set the system param
    execute：echo 50000000 > /proc/sys/fs/inotify/max_user_watches
    execute：echo 327679 > /proc/sys/fs/inotify/max_queued_events
    parse the command param
    option: -r 	rsync all the local files to the remote servers before the sersync work
    option: -d 	run as a daemon
    option: -o 	config xml name：  /usr/local/sersync/conf/confxml.xml
    daemon thread num: 10
    parse xml config file
    host ip : localhost	host port: 8008
    daemon start，sersync run behind the console
    use rsync password-file :
    user is	rsync_backup
    passwordfile is 	/etc/rsync.password
    config xml parse success
    please set /etc/rsyncd.conf max connections=0 Manually
    sersync working thread 12  = 1(primary thread) + 1(fail retry thread) + 10(daemon sub threads)
    Max threads numbers is: 42 = 12(Thread pool nums) + 30(Sub threads)
    please according your cpu ，use -n param to adjust the cpu rate
    ------------------------------------------
    rsync the directory recursivly to the remote servers once
    working please wait...
    execute command: cd /data0/www/www && rsync -artuz -R --delete ./  --timeout=100 rsync_backup@127.0.0.1::www --password-file=/etc/rsync.password >/dev/null 2>&1
    run the sersync:
    watch path is: /data0/www/www

    // 我们发现只有第一个模块路径可以同步,其他路径不能同步
    [root@rsync_server www]# for n in `ls`;do echo 111 >$n/$n.txt;done    //在master节点写一个脚本,在同步模块目录下创建和目录同名的txt文件

    [root@rsync_server www]# tree /data0
    /data0
    └── www
        ├── bbs
        │   ├── bbs.log
        │   └── bbs.txt
        ├── blog
        │   ├── blog.log
        │   └── blog.txt
        └── www
            ├── www.log
            └── www.txt

    4 directories, 6 files

    // 到storage节点查看,发现确实只同步了www模块的内容
    [root@rsync_client1 ~]# tree /data0
    /data0
    └── www
        ├── bbs
        │   └── bbs.log
        ├── blog
        │   └── blog.log
        └── www
            ├── www.log
            └── www.txt

    4 directories, 4 files

    [root@rsync_client2 ~]# tree /data0
    /data0
    └── www
        ├── bbs
        │   └── bbs.log
        ├── blog
        │   └── blog.log
        └── www
            ├── www.log
            └── www.txt

    4 directories, 4 files
    ```
##### 解决方案:我们可以把配置文件改成对/data0/www/目录进行同步或者 把配置文件按照模块复制保存成不同的配置文件
- 比如单独的www模块配置文件如下:
    ```
    <?xml version="1.0" encoding="ISO-8859-1"?>
    <head version="2.5">
        <host hostip="localhost" port="8008"></host>
        <debug start="false"/>
        <fileSystem xfs="false"/>
        <filter start="false">
    	<exclude expression="(.*)\.svn"></exclude>
    	<exclude expression="(.*)\.gz"></exclude>
    	<exclude expression="^info/*"></exclude>
    	<exclude expression="^static/*"></exclude>
        </filter>
        <inotify>
    	<delete start="true"/>
    	<createFolder start="true"/>
    	<createFile start="false"/>
    	<closeWrite start="true"/>
    	<moveFrom start="true"/>
    	<moveTo start="true"/>
    	<attrib start="false"/>
    	<modify start="false"/>
        </inotify>

        <sersync>

      <localpath watch="/data0/www/www">
               <remote ip="127.0.0.1" name="www"/>
               <remote ip="192.168.1.31" name="www"/>
               <remote ip="192.168.1.32" name="www"/>
      </localpath>

        <rsync>
    	    <commonParams params="-artuz"/>
    	    <auth start="true" users="rsync_backup" passwordfile="/etc/rsync.password"/>
    	    <userDefinedPort start="false" port="874"/><!-- port=874 -->
    	    <timeout start="true" time="100"/><!-- timeout=100 -->
    	    <ssh start="false"/>
    	</rsync>

      //下面的脚本名称有改动
    	<failLog path="/usr/local/sersync/logs/www_rsync_fail_log.sh" timeToExecute="60"/><!--default every 60mins execute once-->
    	<crontab start="false" schedule="600"><!--600mins-->
    	    <crontabfilter start="false">
    		<exclude expression="*.php"></exclude>
    		<exclude expression="info/*"></exclude>
    	    </crontabfilter>
    	</crontab>

    	<plugin start="false" name="command"/>
        </sersync>

        <plugin name="command">
    	<param prefix="/bin/sh" suffix="" ignoreError="true"/>	<!--prefix /opt/tongbu/mmm.sh suffix-->
    	<filter start="false">
    	    <include expression="(.*)\.php"/>
    	    <include expression="(.*)\.sh"/>
    	</filter>
        </plugin>

        <plugin name="socket">
    	<localpath watch="/opt/tongbu">
    	    <deshost ip="192.168.138.20" port="8009"/>
    	</localpath>
        </plugin>
        <plugin name="refreshCDN">
    	<localpath watch="/data0/htdocs/cms.xoyo.com/site/">
    	    <cdninfo domainname="ccms.chinacache.com" port="80" username="xxxx" passwd="xxxx"/>
    	    <sendurl base="http://pic.xoyo.com/cms"/>
    	    <regexurl regex="false" match="cms.xoyo.com/site([/a-zA-Z0-9]*).xoyo.com/images"/>
    	</localpath>
        </plugin>
    </head>
    ```
- 多实例部署sersync:
    ```
    //分别执行下面的三条命令,并把这三条命令放到/etc/rc.local中,
    sersync -r -d -o /usr/local/sersync/conf/www_confxml.xml
    sersync -r -d -o /usr/local/sersync/conf/bbs_confxml.xml
    sersync -r -d -o /usr/local/sersync/conf/blog_confxml.xml

    // 查看进程
    [root@rsync_server conf]# ps -ef|grep sersync
    root     20941     1  0 07:26 ?        00:00:00 sersync -r -d -o /usr/local/sersync/conf/www_confxml.xml
    root     20964     1  0 07:26 ?        00:00:00 sersync -r -d -o /usr/local/sersync/conf/bbs_confxml.xml
    root     20987     1  0 07:26 ?        00:00:00 sersync -r -d -o /usr/local/sersync/conf/blog_confxml.xml

    // 再进行测试
    [root@rsync_server conf]# cd /data0/www
    [root@rsync_server www]# for n in `ls`;do echo ddd >$n/$n$n.txt;done  //在master节点执行命令创建文件
    [root@rsync_server www]# tree   //在master节点查看/data0/www/的文件结构
    .
    ├── bbs
    │   ├── bbsbbs.txt
    │   ├── bbs.log
    │   └── bbs.txt
    ├── blog
    │   ├── blogblog.txt
    │   ├── blog.log
    │   └── blog.txt
    └── www
        ├── www.log
        ├── www.txt
        └── wwwwww.txt

    3 directories, 9 files

    // 到两个storage节点查看结果
    [root@rsync_client1 ~]# tree /data0/www   //storage1同步成功
    /data0/www
    ├── bbs
    │   ├── bbsbbs.txt
    │   ├── bbs.log
    │   └── bbs.txt
    ├── blog
    │   ├── blogblog.txt
    │   ├── blog.log
    │   └── blog.txt
    └── www
        ├── www.log
        ├── www.txt
        └── wwwwww.txt

    3 directories, 9 files

    [root@rsync_client2 ~]# tree /data0/www   //storage2同步成功
    /data0/www
    ├── bbs
    │   ├── bbsbbs.txt
    │   ├── bbs.log
    │   └── bbs.txt
    ├── blog
    │   ├── blogblog.txt
    │   ├── blog.log
    │   └── blog.txt
    └── www
        ├── www.log
        ├── www.txt
        └── wwwwww.txt

    3 directories, 9 files

    // 再测试删除文件
    [root@rsync_server www]# for n in `ls`;do rm -f $n/$n$n.txt;done
    [root@rsync_server www]# tree
    .
    ├── bbs
    │   ├── bbs.log
    │   └── bbs.txt
    ├── blog
    │   ├── blog.log
    │   └── blog.txt
    └── www
        ├── www.log
        └── www.txt

    3 directories, 6 files
    // 去storage节点查看也可以发现同步成功
    ```
- 分别执行下面的三条命令,并把这三条命令放到/etc/rc.local中,
  ```
  // 注意不用-r选项,用了-r,每次启动会整体同步一次.比较浪费资源,也没有必要
  sersync -d -o /usr/local/sersync/conf/www_confxml.xml
  sersync -d -o /usr/local/sersync/conf/bbs_confxml.xml
  sersync -d -o /usr/local/sersync/conf/blog_confxml.xml
  ```
- sersync的参数说明
  参数|说明
  ---|---
  -r|在实施实时监控钱对主服务器目录与远程目标主机进行一次整体同步
  -o XX.xml|用来指定配置文件
  -n NUM|-n参数为指定默认的线程池的县城总数
  -d|后台启动服务,在通常情况下,使用-r参数对本地到远程整体同步一遍以后,在后台运行此参数启动守护进程进行实时同步,所以通常第一次整体同步时,-d和-r经常会联合使用
  -m pluginNAME|不进行同步,只运行插件pluginNAME
- Dell R710
    ```
    Unit Price:  25K
    Details: 48G Ram, SAS 300G*3, Raid 5
    ```
- 并发通俗解释:
    ```
    高速公路服务区厕所有20个小便池,假设一次小便时间是30秒,那么厕所的并发就是30秒内20人同时小便,
    所以这个厕所的并发是20,keepalive时间是30秒
    ```
- 一般情况下,当rsync的master和slave端的文件数量差距小于master端每秒创建的文件数时,说明同步是实时的.
